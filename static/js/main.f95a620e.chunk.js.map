{"version":3,"sources":["App/AppModel.ts","App/AppViewModel.ts","styles/global.ts","App/components/Digit/Digit.tsx","App/components/Countdown/Countdown.tsx","App/components/Line/Line.tsx","App/components/Lines/Lines.tsx","App/App.tsx","App/AppProvider.tsx","index.tsx"],"names":["AppModel","endTime","dayjs","add","timeLeft","this","diff","makeObservable","observable","tick","action","requestAnimationFrame","setTimeout","left","Math","floor","seconds","secondsLeft","minutes","minutesLeft","AppViewModel","appModel","microseconds","hours","AppViewModelContext","React","createContext","GlobalFonts","createGlobalStyle","Digit","styled","div","CountdownContainer","Countdown","observer","appViewModel","useContext","BaseLine","Line","props","top","time","Lines","height","window","innerHeight","document","documentElement","clientHeight","body","useState","lines","Array","fill","map","_","idx","random","App","AppProvider","Provider","value","ReactDOM","render","getElementById"],"mappings":"iMAKaA,EAAb,WAIE,aAAe,yBAHfC,QAAUC,MAAQC,IAAI,EAAG,SAGX,KAFdC,SAAmBF,IAAMG,KAAKJ,SAASK,KAAKJ,OAG1CK,YAAeF,KAAM,CACnBD,SAAUI,IACVC,KAAMC,MAGRL,KAAKI,OAVT,wCAaE,WAAQ,IAAD,OACLJ,KAAKD,SAAWF,IAAMG,KAAKJ,SAASK,KAAKJ,OAEzCS,uBAAsB,kBAAMC,YAAW,kBAAM,EAAKH,SAAQ,QAhB9D,wBAmBE,WACE,IAAMI,EAAOR,KAAKD,SAAW,IAC7B,OAAIS,EAAO,GAAU,KAAN,OAAYA,GACvBA,EAAO,IAAW,IAAN,OAAWA,GAEpBA,IAxBX,mBA2BE,WACE,OAAOC,KAAKC,MAAMV,KAAKD,SAAW,OA5BtC,uBA+BE,WACE,OAAOC,KAAKW,QAAU,KAhC1B,mBAmCE,WACE,OAAQX,KAAKW,QAAUX,KAAKY,aAAe,KApC/C,uBAuCE,WACE,OAAOZ,KAAKa,QAAU,KAxC1B,iBA2CE,WACE,OAAQb,KAAKa,QAAUb,KAAKc,aAAe,OA5C/C,KCAaC,EAAb,WAGE,aAAe,yBAFfC,SAAW,IAAIrB,EAGbO,YAAeF,KAAM,IAJzB,8CAOE,WACE,OAAOA,KAAKgB,SAASC,eARzB,mBAWE,WACE,OAAOjB,KAAKgB,SAASJ,YAAc,GAAKZ,KAAKgB,SAASJ,YAA/C,WAAiEZ,KAAKgB,SAASJ,eAZ1F,mBAeE,WACE,OAAOZ,KAAKgB,SAASF,YAAc,GAAKd,KAAKgB,SAASF,YAA/C,WAAiEd,KAAKgB,SAASF,eAhB1F,iBAmBE,WACE,OAAOd,KAAKgB,SAASE,MAAQ,GAAKlB,KAAKgB,SAASE,MAAzC,WAAqDlB,KAAKgB,SAASE,WApB9E,KAwBaC,EAAsBC,IAAMC,cAA4B,M,cC3BxDC,EAAcC,YAAH,ib,QCAXC,EAAQC,IAAOC,IAAV,8S,OCMZC,EAAqBF,IAAOC,IAAV,4IAQXE,EAAYC,aAAS,WAChC,IAAMC,EAAeC,qBAAWZ,GAEhC,OACE,eAACQ,EAAD,WACE,cAACH,EAAD,UAAQM,EAAaZ,QACrB,cAACM,EAAD,gBACA,cAACA,EAAD,UAAQM,EAAajB,UACrB,cAACW,EAAD,gBACA,cAACA,EAAD,UAAQM,EAAanB,UACrB,cAACa,EAAD,gBACA,cAACA,EAAD,UAAQM,EAAab,qB,QClBrBe,EAAWP,IAAOC,IAAV,shBA+BDO,EAAOR,YAAOO,EAAPP,CAAH,8EACR,SAACS,GAAD,OAAWA,EAAMC,OACL,SAACD,GAAD,OAAWA,EAAME,QCvCzBC,EAAQ,WACnB,IAAMC,EAASC,OAAOC,aAAeC,SAASC,gBAAgBC,cAAgBF,SAASG,KAAKD,aADnE,EAECE,mBAASpC,KAAKC,MAAM4B,EAAS,KAF9B,mBAElBQ,EAFkB,UAIzB,OACE,mCACGC,MAAMD,GACJE,KAAK,MACLC,KAAI,SAACC,EAAGC,GAAJ,OACH,cAAClB,EAAD,CAAgBE,IAAW,GAANgB,EAAUf,KAAsB,EAAhB3B,KAAK2C,UAA/BD,SCRRE,EAAM,WACjB,OACE,qCACE,cAAC,EAAD,IACA,cAACzB,EAAD,QCFO0B,EAAc,WACzB,IAAMxB,EAAe,IAAIf,EAEzB,OACE,eAACI,EAAoBoC,SAArB,CAA8BC,MAAO1B,EAArC,UACE,cAACR,EAAD,IACA,cAAC,EAAD,QCRNmC,IAASC,OAAO,cAAC,EAAD,IAASjB,SAASkB,eAAe,W","file":"static/js/main.f95a620e.chunk.js","sourcesContent":["import React from 'react'\n\nimport { action, computed, makeObservable, observable } from 'mobx'\nimport dayjs from 'dayjs'\n\nexport class AppModel {\n  endTime = dayjs().add(2, 'hours')\n  timeLeft: number = dayjs(this.endTime).diff(dayjs())\n\n  constructor() {\n    makeObservable(this, {\n      timeLeft: observable,\n      tick: action,\n    })\n\n    this.tick()\n  }\n\n  tick() {\n    this.timeLeft = dayjs(this.endTime).diff(dayjs())\n\n    requestAnimationFrame(() => setTimeout(() => this.tick(), 0))\n  }\n\n  get microseconds() {\n    const left = this.timeLeft % 1000\n    if (left < 10) return `00${left}`\n    if (left < 100) return `0${left}`\n\n    return left\n  }\n\n  get seconds() {\n    return Math.floor(this.timeLeft / 1000)\n  }\n\n  get secondsLeft() {\n    return this.seconds % 60\n  }\n\n  get minutes() {\n    return (this.seconds - this.secondsLeft) / 60\n  }\n\n  get minutesLeft() {\n    return this.minutes % 60\n  }\n\n  get hours() {\n    return (this.minutes - this.minutesLeft) / 60\n  }\n}\n","import React from 'react'\nimport { makeObservable } from 'mobx'\n\nimport { AppModel } from './AppModel'\n\nexport class AppViewModel {\n  appModel = new AppModel()\n\n  constructor() {\n    makeObservable(this, {})\n  }\n\n  get microseconds() {\n    return this.appModel.microseconds\n  }\n\n  get seconds() {\n    return this.appModel.secondsLeft > 10 ? this.appModel.secondsLeft : `0${this.appModel.secondsLeft}`\n  }\n\n  get minutes() {\n    return this.appModel.minutesLeft > 10 ? this.appModel.minutesLeft : `0${this.appModel.minutesLeft}`\n  }\n\n  get hours() {\n    return this.appModel.hours > 10 ? this.appModel.hours : `0${this.appModel.hours}`\n  }\n}\n\nexport const AppViewModelContext = React.createContext<AppViewModel>(null)\n","import { createGlobalStyle } from 'styled-components'\n\nexport const GlobalFonts = createGlobalStyle`\n  body {\n    margin: 0;\n    overflow: hidden;\n  }\n\n  @font-face {\n    font-family: 'Alarm Clock';\n    src: url('./fonts/alarm-clock.woff2') format('woff2'), \n      url('./fonts/alarm-clock.woff') format('woff')\n  }\n\n  @keyframes lines {\n    0% { \n      opacity: 0;\n    }\n    50%  {\n      opacity: .7;\n    }\n    99% {\n      opacity: 0;\n    }\n    100% {\n      opacity: 1;\n    }\n  }\n`\n","import styled from 'styled-components'\n\nexport const Digit = styled.div`\n  font-family: 'Alarm Clock';\n  font-size: 14vw;\n  margin: 0 10px;\n  background-color: #da0000;\n  color: transparent;\n  text-shadow: 4px 4px 3px #ffffff80, 4px 4px 0 #ff000080;\n  background-clip: text;\n  -webkit-background-clip: text;\n  -moz-background-clip: text;\n`\n","import React, { useContext } from 'react'\nimport { observer } from 'mobx-react'\nimport styled from 'styled-components'\n\nimport { AppViewModelContext } from '../../AppViewModel'\n\nimport { Digit } from '../Digit'\n\nconst CountdownContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n  background: #000000;\n`\n\nexport const Countdown = observer(() => {\n  const appViewModel = useContext(AppViewModelContext)\n\n  return (\n    <CountdownContainer>\n      <Digit>{appViewModel.hours}</Digit>\n      <Digit>:</Digit>\n      <Digit>{appViewModel.minutes}</Digit>\n      <Digit>:</Digit>\n      <Digit>{appViewModel.seconds}</Digit>\n      <Digit>.</Digit>\n      <Digit>{appViewModel.microseconds}</Digit>\n    </CountdownContainer>\n  )\n})\n","import styled from 'styled-components'\n\ninterface Props {\n  // prettier-ignore\n  top: number;\n  // prettier-ignore\n  time: number;\n}\n\nconst BaseLine = styled.div`\n  position: absolute;\n  left: 0;\n  right: 0;\n  width: 100%;\n  height: 1px;\n  background: blue;\n  transform: rotate(1deg);\n  mix-blend-mode: screen;\n  -webkit-filter: blur(1px);\n  -moz-filter: blur(1px);\n  filter: blur(1px);\n  &:after,\n  &:before {\n    content: '';\n    position: absolute;\n    left: 0;\n    width: 100%;\n    height: 1px;\n    mix-blend-mode: screen;\n  }\n  &:after {\n    top: 2px;\n    background: red;\n  }\n  &:before {\n    top: -2px;\n    background: limegreen;\n  }\n`\n\nexport const Line = styled(BaseLine)<Props>`\n  top: ${(props) => props.top}px;\n  animation: lines ${(props) => props.time}s infinite;\n`\n","import React, { useState } from 'react'\nimport { Line } from '../Line/Line'\n\nexport const Lines = () => {\n  const height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight\n  const [lines, setLines] = useState(Math.floor(height / 10))\n\n  return (\n    <>\n      {Array(lines)\n        .fill(null)\n        .map((_, idx) => (\n          <Line key={idx} top={idx * 10} time={Math.random() * 5} />\n        ))}\n    </>\n  )\n}\n","import React from 'react'\nimport { Countdown } from './components/Countdown'\nimport { Lines } from './components/Lines'\n\nexport const App = () => {\n  return (\n    <>\n      <Lines />\n      <Countdown />\n    </>\n  )\n}\n","import React from 'react'\nimport { AppViewModel, AppViewModelContext } from './AppViewModel'\n\nimport { GlobalFonts } from '../styles/global'\nimport { App } from './App'\n\nexport const AppProvider = () => {\n  const appViewModel = new AppViewModel()\n\n  return (\n    <AppViewModelContext.Provider value={appViewModel}>\n      <GlobalFonts />\n      <App />\n    </AppViewModelContext.Provider>\n  )\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}